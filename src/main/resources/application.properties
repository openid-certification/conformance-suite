# Current framework version
fintechlabs.version=5.1.34

# If set, the suite will update mongodb's featureCompatibilityVersion on startup
# As per mongodb documentation, this should be changed sometime after upgrading to a newer mongodb
# Leave unset or blank to manage updating featureCompatibilityVersion manually
openid.mongodb.targetFeatureCompatibilityVersion=6.0

spring.data.mongodb.uri=mongodb://mongodb:27017/test_suite
# Avoid exporthtml timing out
spring.mvc.async.request-timeout=2m
fintechlabs.base_url=https://localhost:8443
fintechlabs.base_mtls_url=https://localhost:8444

# If true, this redirects port 8443 on localhost to the same port on the ingress (httpd).
# This is so that selenium running on this machine can make submissions via the ingress
# when a developer is running the conformance suite locally, as otherwise accesses to
# https://localhost:8443/ will fail.
# (when deployed in the cloud, selenium will be sent to the external hostname & IP for the
# conformance suite which will work fine - it's only when the hostname resolves 127.0.0.1
# that the problem happens.)
fintechlabs.startredir=false

# The client name is what will be registered when doing OIDC dynamic registration
oidc.clientname=OIDF Conformance Suite
# Make sure static clients match the redirect uri below
oidc.redirecturi=${fintechlabs.base_url}/openid_connect_login

# Configure below to match your google client info credentials
oidc.google.clientid=google-client
oidc.google.secret=google-secret
# Issuer should always be accounts.google.com, but can be configured here just in case.
oidc.google.iss=https://accounts.google.com

# Enter the google domain you want to grant admin rights to
# multiple values may be specified separated by commas
# oidc.admin.domains=fintechlabs.io
# If not using google for the admin issuer, specify the group name required for admins
oidc.admin.group=openid-conformance-suite-admins
# admin.issuer; set depending which login method admins will use - e.g.
# https://accounts.google.com - use google, set oidc.admin.domains to your domain(s)
# https://gitlab.com - use the cloud gitlab, set oidc.admin.group to the gitlab group your admins are members of
# or you could use a local gitlab install & set oidc.admin.group
# Other issuers that can return a 'groups' array in the userinfo or id_token can be used (e.g. azure)
oidc.admin.issuer=https://gitlab.com

# 'login with gitlab' openid connect client credentials
# setup on https://gitlab.com/oauth/applications/
oidc.gitlab.clientid=gitlab-client
oidc.gitlab.secret=gitlab-secret
oidc.gitlab.iss=https://gitlab.com

# If the admin issuer is gitlab and a user has the following claims with one of the associated roles contained in the userinfo, we grant the admin role
oidc.gitlab.admin-group-indicator-claims={'https://gitlab.org/claims/groups/maintainer':{'openid'}, 'https://gitlab.org/claims/groups/owner':{'openid'}}

server.forward-headers-strategy=NATIVE
server.max-http-request-header-size=32KB

# Keypair for signing and export. Note that the trailing backslashes allow for a multiline value.
fintechlabs.jwks={\
  "keys": [\
    {\
      "kty": "RSA",\
      "d": "D5kUo5FPWV0U8cU6ZnxJ7Ljt_vRbBia8-MnTO_s3jpuL7t3ANavUHkuiLJOR1JAuxY-ueRqKiqHGq6TKVQKHPfPV-2lX5qECZ-HTETVZsMiLrZ6ims5myQxwJSiWqLtbJcytRG3XIM8MsuHS8a6L4YplSemuKVhtulD8WkG7PxIJDDb9mQh1W_5mT_DeMUKffL8Zdbf_pvFV8vK3drjoXFTVa9w18CsfodPOu49WlKXhpCIvuBNnr21faG1xIpWOolHio35rHHnMdhhZzda6l5CG2Cv5RunrQe7XJyzkNWhXxjRaZXdpAOuSz_alJPK-4stS6z7sUSYg9PvnPuo4IQ",\
      "e": "AQAB",\
      "use": "sig",\
      "kid": "demo-test-key-20180514",\
      "alg": "RS256",\
      "n": "j_Uxcxwd8mNeTgVp8b-gkp1_b-E2IZdY_lWWJYJz7z1qL5OGRSXPaEmPvnMXHRgFr9adSK4K7gWZThqIaSgP4UBG6_ecf12plMq246SIyIaPWIRjaMPjSIsOg50RmsTDcIJ4z8RtZyYpGJHbbRvaE8Qc2iUirqdRCLbN00ypwh25fA5JplNnBO4SloTuiHVyyUCFoBamlT6iXskTGx7Fzfr40LUf_-M-uPAqXjiB91tfT9x076qv91TPIHvfBdJKDitxx5qM8Fg3iz_P-XWEEQESrC3DQLWd7YgNJ_UFePoJmwnlscypR1QJUtpeqJsQtuFSXJRiwrdVGgpUBgOJpQ"\
    }\
  ]\
}

# Key ID from the above key set to use for signing exports.
fintechlabs.signingKey=demo-test-key-20180514

logging.level.com.gargoylesoftware.htmlunit=ERROR
# Disable verbose CSS Errors log messages
logging.level.org.htmlunit.DefaultCssErrorHandler=ERROR

# Enable these to help track down problems occuring in the selenium browser automation
# See also https://htmlunit.sourceforge.io/logging.html
# logging.level.com.gargoylesoftware.htmlunit=TRACE
# logging.level.org.htmlunit=TRACE
# logging.level.org.apache.http=TRACE
# logging.level.org.seleniumhq=TRACE
# logging.level.net.openid.conformance.frontChannel=DEBUG
# logging.level.httpclient.wire=DEBUG

# logging.level.org.springframework.web=DEBUG

# Allow to show external Ip address
fintechlabs.show_external_ip_address=false

springdoc.packagesToScan=net.openid.conformance
springdoc.swagger-ui.path=/api-document.html

spring.security.oauth2.client.provider.gitlab.issuerUri=${oidc.gitlab.iss}
spring.security.oauth2.client.provider.gitlab.user-name-attribute=preferred_username
spring.security.oauth2.client.registration.gitlab.client-name=GitLab
spring.security.oauth2.client.registration.gitlab.client-id=${oidc.gitlab.clientid}
spring.security.oauth2.client.registration.gitlab.client-secret=${oidc.gitlab.secret}
spring.security.oauth2.client.registration.gitlab.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.gitlab.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.gitlab.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.gitlab.scope=openid,email

spring.security.oauth2.client.provider.google.issuerUri=${oidc.google.iss}
spring.security.oauth2.client.provider.google.user-name-attribute=email
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.client-id=${oidc.google.clientid}
spring.security.oauth2.client.registration.google.client-secret=${oidc.google.secret}
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=openid,email

springdoc.show-actuator=false

# comma separated list of tests which are allowed to fail when generating the certification package
net.openid.conformance.logging.logapi.certification-package-failed-tests-exception-list=oidcc-server-rotate-keys
